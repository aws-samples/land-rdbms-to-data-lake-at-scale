{
  "StartAt": "CheckBlueprintExist",
  "States": {
    "CheckBlueprintExist": {
      "Type": "Task",
      "Next": "BlueprintExistChoice",
      "Parameters": {
        "Name": "data-lake-landing"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:getBlueprint",
      "Catch": [
        {
          "ErrorEquals": [
            "Glue.EntityNotFoundException"
          ],
          "Next": "CreateBlueprint"
        }
      ],
      "OutputPath": "$.Blueprint"
    },
    "BlueprintExistChoice": {
      "Type": "Choice",
      "Choices": [
        {
          "Or": [
            {
              "Variable": "$.Status",
              "StringMatches": "ACTIVE"
            },
            {
              "Variable": "$.Status",
              "StringMatches": "FAILED"
            }
          ],
          "Next": "DeleteBlueprint"
        },
        {
          "Or": [
            {
              "Variable": "$.Status",
              "StringMatches": "UPDATING"
            },
            {
              "Variable": "$.Status",
              "StringMatches": "CREATING"
            }
          ],
          "Next": "WaitForBlueprintUpdate"
        }
      ]
    },
    "DeleteBlueprint": {
      "Type": "Task",
      "Next": "WaitForBlueprintUpdate",
      "Parameters": {
        "Name": "data-lake-landing"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:deleteBlueprint"
    },
    "CreateBlueprint": {
      "Type": "Task",
      "Parameters": {
        "BlueprintLocation": "s3://data-lake-raw-layer-123456789012-region/data-lake-landing.zip",
        "Name": "data-lake-landing"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:createBlueprint",
      "Next": "WaitForBlueprintCreation"
    },
    "WaitForBlueprintCreation": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "CheckBlueprintCreationStatus"
    },
    "CheckBlueprintCreationStatus": {
      "Type": "Task",
      "Next": "BlueprintCreationStatusChoice",
      "Parameters": {
        "Name": "data-lake-landing"
      },
      "Resource": "arn:aws:states:::aws-sdk:glue:getBlueprint"
    },
    "BlueprintCreationStatusChoice": {
      "Type": "Choice",
      "Choices": [
        {
          "Variable": "$.Blueprint.Status",
          "StringMatches": "ACTIVE",
          "Next": "ParseGlueWorkflowsConfig"
        },
        {
          "Variable": "$.Blueprint.Status",
          "StringMatches": "FAILED",
          "Next": "Fail"
        },
        {
          "Or": [
            {
              "Variable": "$.Blueprint.Status",
              "StringMatches": "CREATING"
            },
            {
              "Variable": "$.Blueprint.Status",
              "StringMatches": "UPDATING"
            }
          ],
          "Next": "WaitForBlueprintCreation"
        }
      ]
    },
    "ParseGlueWorkflowsConfig": {
      "Type": "Task",
      "Next": "MapForEachGlueWorkflow",
      "Parameters": {
        "Bucket": "data-lake-raw-layer-123456789012-region",
        "Key": "data-lake-landing.json"
      },
      "Resource": "arn:aws:states:::aws-sdk:s3:getObject",
      "ResultSelector": {
        "S3Response.$": "States.StringToJson($.Body)"
      }
    },
    "MapForEachGlueWorkflow": {
      "Type": "Map",
      "Next": "Success",
      "Iterator": {
        "StartAt": "CheckTriggerExist",
        "States": {
          "CheckTriggerExist": {
            "Type": "Task",
            "Parameters": {
              "Name.$": "States.Format('{}_starting_trigger', $.WorkflowName)"
            },
            "Resource": "arn:aws:states:::aws-sdk:glue:getTrigger",
            "Next": "Parallel",
            "ResultPath": "$.TriggerOutput",
            "Catch": [
              {
                "ErrorEquals": [
                  "Glue.EntityNotFoundException"
                ],
                "Next": "CreateWorkflowFromBlueprint",
                "ResultPath": "$.Error"
              }
            ]
          },
          "Parallel": {
            "Type": "Parallel",
            "Next": "DeleteTrigger",
            "Branches": [
              {
                "StartAt": "Wait1s",
                "States": {
                  "Wait1s": {
                    "Type": "Wait",
                    "Seconds": 1,
                    "Next": "CheckWorkflowExist"
                  },
                  "CheckWorkflowExist": {
                    "Type": "Task",
                    "Parameters": {
                      "Name.$": "$.TriggerOutput.Trigger.WorkflowName"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:getWorkflow",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "Glue.EntityNotFoundException"
                        ],
                        "Next": "WorkflowDeleted",
                        "ResultPath": "$.Error"
                      }
                    ],
                    "Next": "DeleteWorkflow"
                  },
                  "DeleteWorkflow": {
                    "Type": "Task",
                    "Parameters": {
                      "Name.$": "$.Workflow.Name"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:deleteWorkflow",
                    "Next": "WaitForWorkflowDelete"
                  },
                  "WaitForWorkflowDelete": {
                    "Type": "Wait",
                    "Seconds": 5,
                    "Next": "CheckWorkflowDelete"
                  },
                  "CheckWorkflowDelete": {
                    "Type": "Task",
                    "Parameters": {
                      "Name.$": "$.Name"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:getWorkflow",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "Glue.EntityNotFoundException"
                        ],
                        "Next": "WorkflowDeleted",
                        "ResultPath": "$.Error"
                      }
                    ],
                    "Next": "WaitForWorkflowDelete"
                  },
                  "WorkflowDeleted": {
                    "Type": "Wait",
                    "Seconds": 1,
                    "End": true
                  }
                }
              },
              {
                "StartAt": "Wait2s",
                "States": {
                  "Wait2s": {
                    "Type": "Wait",
                    "Seconds": 2,
                    "Next": "CheckJobExist"
                  },
                  "CheckJobExist": {
                    "Type": "Task",
                    "Parameters": {
                      "JobName.$": "$.TriggerOutput.Trigger.Actions[0].JobName"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:getJob",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "Glue.EntityNotFoundException"
                        ],
                        "Next": "JobDeleted",
                        "ResultPath": "$.Error"
                      }
                    ],
                    "Next": "DeleteJob"
                  },
                  "DeleteJob": {
                    "Type": "Task",
                    "Parameters": {
                      "JobName.$": "$.Job.Name"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:deleteJob",
                    "Next": "WaitForJobDelete"
                  },
                  "WaitForJobDelete": {
                    "Type": "Wait",
                    "Seconds": 5,
                    "Next": "CheckJobDelete"
                  },
                  "CheckJobDelete": {
                    "Type": "Task",
                    "Parameters": {
                      "JobName.$": "$.JobName"
                    },
                    "Resource": "arn:aws:states:::aws-sdk:glue:getJob",
                    "Catch": [
                      {
                        "ErrorEquals": [
                          "Glue.EntityNotFoundException"
                        ],
                        "Next": "JobDeleted",
                        "ResultPath": "$.Error"
                      }
                    ],
                    "Next": "WaitForJobDelete"
                  },
                  "JobDeleted": {
                    "Type": "Wait",
                    "Seconds": 1,
                    "End": true
                  }
                }
              }
            ],
            "ResultPath": "$.ParallelOutput",
            "ResultSelector": "cleared"
          },
          "DeleteTrigger": {
            "Type": "Task",
            "Parameters": {
              "Name.$": "$.TriggerOutput.Trigger.Name"
            },
            "Resource": "arn:aws:states:::aws-sdk:glue:deleteTrigger",
            "Next": "WaitForTriggerDelete",
            "ResultPath": "$.TriggerOutput.Trigger"
          },
          "WaitForTriggerDelete": {
            "Type": "Wait",
            "Seconds": 10,
            "Next": "CheckTriggerDelete"
          },
          "CheckTriggerDelete": {
            "Type": "Task",
            "Parameters": {
              "Name.$": "$.TriggerOutput.Trigger.Name"
            },
            "Resource": "arn:aws:states:::aws-sdk:glue:getTrigger",
            "Next": "WaitForTriggerDelete",
            "Catch": [
              {
                "ErrorEquals": [
                  "Glue.EntityNotFoundException"
                ],
                "Next": "CreateWorkflowFromBlueprint",
                "ResultPath": "$.Error"
              }
            ],
            "ResultPath": "$.TriggerOutput"
          },
          "CreateWorkflowFromBlueprint": {
            "Type": "Task",
            "Parameters": {
              "BlueprintName": "data-lake-landing",
              "Parameters.$": "$",
              "RoleArn.$": "$.GlueExecutionRole"
            },
            "Resource": "arn:aws:states:::aws-sdk:glue:startBlueprintRun",
            "Next": "WaitForWorkflowCreation",
            "ResultSelector": {
              "BlueprintRun": {
                "RunId.$": "$.RunId"
              }
            }
          },
          "WaitForWorkflowCreation": {
            "Type": "Wait",
            "Seconds": 20,
            "Next": "CheckBlueprintRunStatus"
          },
          "CheckBlueprintRunStatus": {
            "Type": "Task",
            "Parameters": {
              "BlueprintName": "data-lake-landing",
              "RunId.$": "$.BlueprintRun.RunId"
            },
            "Resource": "arn:aws:states:::aws-sdk:glue:getBlueprintRun",
            "Next": "BlueprintRunStatusChoice"
          },
          "BlueprintRunStatusChoice": {
            "Type": "Choice",
            "Choices": [
              {
                "Variable": "$.BlueprintRun.State",
                "StringMatches": "SUCCEEDED",
                "Next": "CreateWorkflowSuccess"
              },
              {
                "Variable": "$.BlueprintRun.State",
                "StringMatches": "RUNNING",
                "Next": "WaitForWorkflowCreation"
              },
              {
                "Or": [
                  {
                    "Variable": "$.BlueprintRun.State",
                    "StringMatches": "FAILED"
                  },
                  {
                    "Variable": "$.BlueprintRun.State",
                    "StringMatches": "ROLLING_BACK"
                  }
                ],
                "Next": "CreateWorkflowFailed"
              }
            ]
          },
          "CreateWorkflowSuccess": {
            "Type": "Pass",
            "End": true
          },
          "CreateWorkflowFailed": {
            "Type": "Fail"
          }
        }
      },
      "ItemsPath": "$.S3Response.WorkflowList",
      "MaxConcurrency": 5
    },
    "Success": {
      "Type": "Succeed"
    },
    "Fail": {
      "Type": "Fail"
    },
    "WaitForBlueprintUpdate": {
      "Type": "Wait",
      "Seconds": 10,
      "Next": "CheckBlueprintExist"
    }
  },
  "Comment": "Orchestrate AWS Glue blueprint registration and run"
}
